{"version":3,"sources":["App.js","index.js"],"names":["nums","ops","ids","App","useState","undefined","lastPressed","setLastPressed","calc","setCalc","handleClick","e","innerText","target","evaluated","eval","console","log","splitted","split","last","slice","includes","lastNumberIdx","reverse","findIndex","char","length","className","id","onClick","map","num","op","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"63BAGMA,KAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCC,IAAM,CAAE,IAAK,IAAK,IAAK,KACvBC,IAAM,CACV,EAAG,QACH,EAAG,QACH,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,MACH,EAAG,MACH,EAAG,MACH,EAAG,QACH,EAAG,OACH,IAAK,SACL,IAAK,WACL,IAAK,WACL,IAAK,OAGDC,IAAM,SAANA,MACJ,cAAqCC,yDAASC,GAA9C,mNAAOC,YAAP,cAAmBC,eAAnB,cACA,WAAwBH,oDAAS,KAAjC,oNAAOI,KAAP,cAAaC,QAAb,cAEMC,YAAc,SAAdA,YAAeC,GACnB,IAAQC,UAAcD,EAAEE,OAAhBD,UAER,OAAQA,WACN,IAAK,KACHH,QAAQ,KACR,MAGF,IAAK,IAEH,IAAMK,UAAYC,KAAKP,MACvBQ,QAAQC,IAAIH,WACZL,QAAQK,WACR,MAGF,IAAK,IACJ,IAAMI,SAAWV,KAAKW,QACfC,KAAOF,SAASG,OAAO,GAAG,GAC5BD,KAAKE,SAAS,MACdb,QAAQD,KAAM,KAElB,MAGF,QACE,IAAIG,QAAIN,EAER,GAAGJ,IAAIqB,SAASV,WACd,GAAGX,IAAIqB,SAAShB,cAA8B,MAAdM,UAAmB,CAEjD,IAAMW,cAAgBf,KAAKW,MAAM,IAAIK,UACpCC,WAAU,SAAAC,GAAI,MAAa,MAATA,GAAgB1B,KAAKsB,UAAUI,MAClDf,GAAIH,KAAKa,MAAM,EAAGb,KAAKmB,OAASJ,eAA5B,WAAiDX,UAAjD,UAEJD,GAAC,UAAMH,KAAN,YAAcI,UAAd,UAGHD,GAAc,MAATH,KAAgBI,UAAaJ,KAAOI,UAG3CH,QAAQE,IAKZJ,eAAeK,YAGjB,OACE,mEAAKgB,UAAU,aAAf,UACE,mEAAKC,GAAG,UAAUD,UAAU,UAA5B,UACE,uEACCpB,QAGH,mEAAKoB,UAAU,iBAAf,UACE,qEACEA,UAAU,sBACVC,GAAG,QACHC,QAASpB,YAHX,gBAQCV,KAAK+B,KAAI,SAAAC,GAAG,OACX,qEACEJ,UAAS,oBAAuB,IAARI,GAAa,SAErCF,QAASpB,YACTmB,GAAI3B,IAAI8B,GAJV,SAMGA,GAJIA,MAQT,qEACEJ,UAAU,aACVE,QAASpB,YACTmB,GAAG,UAHL,kBAQF,mEAAKD,UAAU,gBAAf,UACG3B,IAAI8B,KAAI,SAAAE,GAAE,OACT,qEACEL,UAAU,SAEVE,QAASpB,YACTmB,GAAI3B,IAAI+B,GAJV,SAMGA,GAJIA,MAQT,qEACEL,UAAU,SACVE,QAASpB,YACTmB,GAAG,SAHL,sBAYO1B,2B,6BCvIf,iEAKA+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.0931d4e1.chunk.js","sourcesContent":["import React,{ useState } from 'react';\r\nimport './App.css'\r\n\r\nconst nums = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];\r\nconst ops = [ '/', '*', '-', '+'];\r\nconst ids = {\r\n  7: 'seven', \r\n  8: 'eight', \r\n  9: 'nine', \r\n  4: 'four', \r\n  5: 'five', \r\n  6: 'six', \r\n  1: 'one', \r\n  2: 'two', \r\n  3: 'three', \r\n  0: 'zero',\r\n  '/': 'divide', \r\n  '*': 'multiply', \r\n  '-': 'subtract', \r\n  '+': 'add'\r\n}\r\n\r\nconst App = () => {\r\n  const [lastPressed,setLastPressed] = useState(undefined);\r\n  const [calc, setCalc] = useState('0');\r\n\r\n  const handleClick = (e) => {\r\n    const { innerText } = e.target;\r\n\r\n    switch (innerText) {\r\n      case 'AC': {\r\n        setCalc('0');\r\n        break;\r\n      }\r\n\r\n      case '=': {\r\n        // eslint-disable-next-line \r\n        const evaluated = eval(calc);\r\n        console.log(evaluated)\r\n        setCalc(evaluated);\r\n        break;\r\n      }\r\n\r\n      case '.': {\r\n       const splitted = calc.split();\r\n        const last = splitted.slice(-1)[0];\r\n        if(!last.includes('.')) {\r\n            setCalc(calc +'.')\r\n        }\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        let e = undefined;\r\n        //check for other operators\r\n        if(ops.includes(innerText)) {\r\n          if(ops.includes(lastPressed) && innerText !== '-') {\r\n            //Hectic\r\n            const lastNumberIdx = calc.split('').reverse()\r\n            .findIndex(char => char !== ' ' && nums.includes(+char)); \r\n            e = calc.slice(0, calc.length - lastNumberIdx) + ` ${innerText} `;\r\n          } else {\r\n            e = `${calc} ${innerText} `;\r\n          } \r\n        }else {\r\n          e = (calc === '0') ? innerText : (calc + innerText);\r\n        }\r\n        \r\n        setCalc(e);\r\n        break;\r\n      }\r\n    }\r\n\r\n    setLastPressed(innerText);\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <div id=\"display\" className=\"display\">\r\n        <small></small>\r\n        {calc}\r\n      </div>\r\n\r\n      <div className=\"nums-container\">\r\n        <button\r\n          className=\"big-h light-grey ac\"\r\n          id=\"clear\"\r\n          onClick={handleClick}\r\n        >\r\n          AC\r\n        </button>\r\n\r\n        {nums.map(num => (\r\n          <button\r\n            className={`dark-grey ${num === 0 && 'big-h'}`}\r\n            key={num}\r\n            onClick={handleClick}\r\n            id={ids[num]}\r\n          >\r\n            {num}\r\n          </button>\r\n        ))}\r\n\r\n        <button \r\n          className=\"light-grey\"\r\n          onClick={handleClick}\r\n          id=\"decimal\"\r\n        >\r\n          .\r\n        </button>\r\n      </div>\r\n      <div className=\"ops-container\">\r\n        {ops.map(op =>(\r\n          <button \r\n            className=\"orange\"\r\n            key={op}\r\n            onClick={handleClick}\r\n            id={ids[op]}\r\n          >\r\n            {op}\r\n          </button>\r\n        ))}\r\n\r\n        <button \r\n          className=\"orange\" \r\n          onClick={handleClick}\r\n          id=\"equals\"\r\n        >\r\n          =\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}